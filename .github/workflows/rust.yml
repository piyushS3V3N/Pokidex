name: Build and Package Executable (Rust)

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1  # Correct action to set up Rust
        with:
          rust-version: stable  # You can specify a version if you need a specific one

      - name: Install dependencies for Ubuntu or macOS
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Install necessary dependencies on Ubuntu
            sudo apt-get update
            sudo apt-get install -y build-essential pkg-config libssl-dev llvm
            # Install any other dependencies your project requires here
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Ensure Homebrew is installed on macOS (if not already installed)
            if ! command -v brew &> /dev/null; then
              echo "Homebrew not found, installing..."
              /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            # Ensure Homebrew is in PATH for this session
            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
            # Install necessary dependencies on macOS
            brew install llvm
            # Install any other dependencies your project requires here
          fi

      - name: Configure Git identity
        run: |
          git config --global user.email "youremail@example.com"
          git config --global user.name "Your Name"
      
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          # Extract the version from Cargo.toml (assuming it's under the [package] section)
          VERSION=$(grep '^version' Cargo.toml | cut -d '=' -f 2 | tr -d '[:space:]')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Version found: $VERSION"

      - name: Create Git tag for release
        run: |
          # Ensure the repository is clean and up-to-date
          git fetch --tags
          
          # Create the tag based on the version found in Cargo.toml
          git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
          
          # Push the tag to GitHub
          git push origin "v${{ env.VERSION }}"

      - name: Build the project with Cargo
        run: |
          cargo build --release  # Build the project for release

      - name: Package the executable
        run: |
          mkdir -p release/${{ matrix.os }}
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            # Move the executable for Ubuntu
            mv target/release/my_project release/ubuntu-latest/my_project
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Move the executable for macOS
            mv target/release/my_project release/macos-latest/my_project
          fi

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/ubuntu-latest/my_project
            release/macos-latest/my_project
